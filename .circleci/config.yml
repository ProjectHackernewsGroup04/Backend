# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      - image: circleci/mongo:4.0.3-xenial
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for Mongo DB to be ready...
          command: dockerize -wait tcp://localhost:27017 -timeout 1m

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            #python manage.py test
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: docker build -t hnclonecphb/backend:$CIRCLE_BRANCH .
      - run: docker push hnclonecphb/backend:$CIRCLE_BRANCH
      - run: docker build -t hnclonecphb/backend:$CIRCLE_WORKFLOW_ID .
      - run: docker push hnclonecphb/backend:$CIRCLE_WORKFLOW_ID

      - store_artifacts:
          path: test-reports
          destination: test-reports
  
  deploy:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy over SSH
          command: |
            ssh $SSH_USER@$SSH_HOST "docker service update --publish-add=5000:5000 --env-add 'CLOUDAMQP_URL=$CLOUDAMQP_URL' -d  --image hnclonecphb/backend:$CIRCLE_WORKFLOW_ID backend"

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
